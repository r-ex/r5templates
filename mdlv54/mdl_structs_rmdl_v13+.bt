//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl, rrig
//   Authors: Valve, Rika, & Others
//   Version: 54
//   Purpose: Respawn MDL Structs
//  Category: Struct
// File Mask: *.rmdl, *.rrig
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define MAX_NUM_LODS 8

//local int i = 0;

// these are just all structs that I have mostly working/fitting, it does not mean they are correct.
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//========
// Headers


// main headers
struct studiohdrv54_v121_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	// these are unknown since I don't know what they cut
	int numunk;
	int unkindex;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// external animations, models, etc.
	// not the same due to streaming, probably mostly unused.
	int numincludemodels; // this works different in apex because rpak models
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex; // OffsetToBoneRemapInfo, sus

	int unk_v54_v121[12];

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2]; // one less than v13

    // this is in all shipped models, probably part of their asset bakery.
	int mayaindex; // doesn't actually need to be written pretty sure, only four bytes when not present.

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk2_v54_v121[11]; // the first index in here is the as the one in v12 and lower

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];
};

struct studiohdrv54_v13_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	// these are unknown since I don't know what they cut
	int numunk;
	int unkindex;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// external animations, models, etc.
	// not the same due to streaming, probably mostly unused.
	int numincludemodels; // this works different in apex because rpak models
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex; // OffsetToBoneRemapInfo, sus

	int unk_v54_v121[12];

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2];

    int unk_v54_v13;

    // this is in all shipped models, probably part of their asset bakery.
	int mayaindex; // doesn't actually need to be written pretty sure, only four bytes when not present.

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk2_v54_v121[11]; // the first index in here is the as the one in v12 and lower

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];

    int unk1_v54_v13[3];

};

struct studiohdrv54_v14_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int unk; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;

    int unk_v54_v14[2]; // added in v13 -> v14
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    // these are unknown since I don't know what they cut
	int numunk;
	int unkindex;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;

	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// external animations, models, etc.
	// not the same due to streaming, probably mostly unused.
	int numincludemodels; // this works different in apex because rpak models
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex; // OffsetToBoneRemapInfo, su

	int unk_v54_v121[12];

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2];

    int unk_v54_v13;

    // this is in all shipped models, probably part of their asset bakery.
	int mayaindex; // doesn't actually need to be written pretty sure, only four bytes when not present.

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk2_v54_v121[11]; // most of these are nulled compared to a v13

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];

    int unk1_v54_v13[3];
};


//=============
// Bone Structs

// bones
struct mstudiobonev54_v121_t
{
	int sznameindex;

	int parent; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos;
	Quaternion quat;
	RadianEuler rot;
	
	Vector3 unkvector; // the same as whatever v53 is

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	int proctype;
    int procindex; // procedural rule
	int physicsbone; // index into physically simulated bone
	
    int surfacepropidx; // index into string tablefor property name

	int contents; // See BSPFlags.h for the contents flags
	
	int surfacepropLookup; // this index must be cached by the loader, not saved in the file
	
	int unk;
};


//===================
// Model/Mesh Structs


// studio models
struct mstudiomodelv54_v121_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	//int unk;

    //int unkindex;
    //int unkindex1;
};

struct mstudiomodelv54_v13_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	int unk;

    //int unkindex;
    //int unkindex1;
};

struct mstudiomodelv54_v14_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	int unk[3]; // bruh

    //int unkindex;
    //int unkindex1;
};

// meshes
struct mstudiomeshv54_v121_t
{
	int material;

	int modelindex;

	int numvertices; // number of unique vertices/normals/texcoords
	int unk; // relates to number of vertices
	
	// a unique ordinal for this mesh
	int meshid;

    Vector3 center;

	// a unique ordinal for this mesh
	//int meshid;

	mstudio_meshvertexdata_t vertexdata;
    
	int unused[2];

};