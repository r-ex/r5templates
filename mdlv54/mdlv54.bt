//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl
//   Authors: Rika
//   Version: 54
// Increment: 8/9/10/11(?)/12
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.rmdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "./source_math.bt"
#include "./mdl_structs.bt"


// headers
studiohdrv54_t mdlHeader <bgcolor=cLtBlue>;

// this is a check for non shipped models.
if (mdlHeader.boneindex > mdlHeader.mayaindex && mdlHeader.mayaindex != 0)
{
    FSeek(mdlHeader.mayaindex);
    char mayabakery[mdlHeader.boneindex - mdlHeader.mayaindex] <fgcolor=cRed>;
}


// bones
FSeek(mdlHeader.boneindex);
mstudiobonev54_t bones[mdlHeader.numbones] <bgcolor=cLtGreen>; // get names working

local int jigglebonecount = 0;
local int i = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebonev54_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

// not sure what's the deal
//FSeek(mdlHeader.m_nBoneFlexDriverIndex);
//mstudioboneflexdriverv54_t boneflexdriver[mdlHeader.m_nBoneFlexDriverCount] <bgcolor=cDkGreen>; 

FSeek(mdlHeader.localattachmentindex);
mstudioattachmentv54_t attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
}

mstudiobboxv54_t bboxes[bboxCount]  <bgcolor=0xa29418>;


FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


// animation
//FSeek(mdlHeader.localanimindex);
//mstudioanimdescv53_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;

FSeek(mdlHeader.localseqindex);
mstudioseqdescv54_t animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a>;


// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
}

mstudiomodelv54_t models[modelCount]<bgcolor=cDkGray>;


//setup nodes, not fully understood
if(mdlHeader.numlocalnodes > 0)
{
    FSeek(mdlHeader.localnodenameindex);
    mstudionode_t node <bgcolor=cDkYellow>;
}


FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;

// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchainv54_t ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
}

mstudioiklinkv54_t iklinks[linkCount] <bgcolor=0x7d3c98>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
}

FSeek(mdlHeader.meshindex);
mstudiomeshv54_t meshes[meshCount] <bgcolor=cLtGray>;


// rui
if (mdlHeader.numruimeshes > 0)
{
    FSeek(mdlHeader.ruimeshindex);
    mstudiorruiheader_t ruiheader[mdlHeader.numruimeshes] <fgcolor=cLtGreen>;

    // some padding here to make it even I think.
    //char ruiheader_filler[12];
    
    FSeek(mdlHeader.ruimeshindex + ruiheader[0].ruimeshindex);
    mstudioruimeshv54_t ruimesh[mdlHeader.numruimeshes] <fgcolor=cGreen, optimize=false>;
    //float ruidata[(mdlHeader.textureindex - (mdlHeader.ruimeshindex + ruiheader[0].ruimesh_offset)) / 4] <fgcolor=cGreen>;
};


// various includes, materials, and groups
//FSeek(mdlHeader.includemodel_index);
//mstudiomodelgroup_t includemodels[mdlHeader.includemodel_count] <bgcolor=cLtBlue>;

FSeek(mdlHeader.textureindex);
mstudiotexturev54_t textures[mdlHeader.numtextures] <bgcolor=cGreen>;

FSeek(mdlHeader.cdtextureindex);
mstudiotexturedir_t cdmaterials[mdlHeader.numcdtextures] <bgcolor=cDkGreen>;

FSeek(mdlHeader.skinindex);
mstudioskingroup_t skingroup[mdlHeader.numskinfamilies] <bgcolor=cLtGreen>;

FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(mdlHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlHeader.numsrcbonetransform] <bgcolor=cDkGreen>;

if (mdlHeader.linearboneindex > 0)
{
    FSeek(mdlHeader.linearboneindex);
    mstudiolinearbonev54_t linearbone <bgcolor=cGreen>;
    
    struct mstudiolinearbonedata_t
    {
        if(linearbone.flagsindex > 0)
            uint32 bone_flags[linearbone.numbones];
        if(linearbone.parentindex > 0)
            uint32 bone_parents[linearbone.numbones];
        
        if(linearbone.posindex > 0)
            Vector3 bone_pos[linearbone.numbones];
        if(linearbone.quatindex > 0)
	        Quaternion bone_quat[linearbone.numbones];
        if(linearbone.rotindex > 0)
	        RadianEuler bone_rot[linearbone.numbones];
        
        if(linearbone.posetoboneindex > 0)
            matrix3x4_t bone_poseToBone[linearbone.numbones];
    };

    mstudiolinearbonedata_t linearbonedata <bgcolor=cLtGreen>;

};


// string table
FSeek(mdlHeader.sznameindex);

local int64 stringtable_size;

if(mdlHeader.unkindex4 == 0)
    stringtable_size = mdlHeader.length - mdlHeader.sznameindex;
else
    stringtable_size = mdlHeader.unkindex4 - mdlHeader.sznameindex;

char stringtable[stringtable_size] <fgcolor=cLtRed>;

//FSeek(mdlHeader.unkindex2);
//unkbytes1header unkbytes1[3];
//float unkbytesfloat1[(mdlHeader.length - (mdlHeader.unkindex2 + unkbytes1[0].unkindex)) / 4];
//uint32 unkbytes1[(mdlHeader.vtxindex - mdlHeader.unkindex2) / 4];