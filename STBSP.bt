//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct LumpOffsetPair
{
    uint64 offset;
    uint64 count; // multiplied by various amounts to get full data size
};

struct STBSPHeader
{
    DWORD magic <fgcolor=cGreen, format=hex>;
    WORD majorVer;
    WORD minorVer;
    char unk[160];
    LumpOffsetPair lumps[6];
    char unk2[128];
};

// Lumps

struct MaterialInfo
{
    uint32 nameOffset; // offset in MATERIAL_NAMES lump for this material's name
    char unk[0x4];
    uint64 materialGUID <format=hex, fgcolor=cYellow>;
    char unk2[0x8];
};

struct ResidentPage
{
    uint64 dataOffset;
    int dataSize;
    float unk2;
    short word10;
    short word12;
    short word14;
    short word16;
};

enum LUMPS // lump types??
{
 LUMP_MATERIAL_NAMES,
 LUMP_MATERIAL_INFO,
 LUMP_UNK2,
 LUMP_UNK3,
 LUMP_RESIDENT_PAGES,
 LUMP_UNK5
};

local uint64 lump0offset = 0;
local uint64 i = 0;

STBSPHeader hdr;

// number of strings = MATERIAL_INFO.count
if(hdr.lumps[ LUMP_MATERIAL_NAMES ].offset != 0)
{
    FSeek(hdr.lumps[ LUMP_MATERIAL_NAMES ].offset);
    char lump0buf[hdr.lumps[ LUMP_MATERIAL_NAMES ].count] <comment="lump 0 - material names">;

    lump0offset = hdr.lumps[ LUMP_MATERIAL_NAMES ].offset;
}

if(hdr.lumps[ LUMP_MATERIAL_INFO ].offset != 0)
{
    FSeek(hdr.lumps[ LUMP_MATERIAL_INFO ].offset);

    MaterialInfo matinfo[hdr.lumps[ LUMP_MATERIAL_INFO ].count] <read=ReadString(lump0offset + this.nameOffset), comment="lump 1 - some material info">;

}

if(hdr.lumps[ LUMP_UNK2 ].offset != 0)
{
    FSeek(hdr.lumps[ LUMP_UNK2 ].offset);
    char lump2buf[4 * hdr.lumps[ LUMP_UNK2 ].count];
}

if(hdr.lumps[ LUMP_UNK3 ].offset != 0)
{
    FSeek(hdr.lumps[ LUMP_UNK3 ].offset);
    char lump3buf[2 * hdr.lumps[ LUMP_UNK3 ].count];
}

if(hdr.lumps[ LUMP_RESIDENT_PAGES ].offset != 0)
{
    FSeek(hdr.lumps[ LUMP_RESIDENT_PAGES ].offset);
    ResidentPage pages[hdr.lumps[ LUMP_RESIDENT_PAGES ].count] <read=Str("%i, cvg: %.14f", this.dataSize, this.unk2)>;


    if(hdr.lumps[ LUMP_UNK5 ].offset != 0)
    {
        
        struct {
            for(i = 0; i < hdr.lumps[ LUMP_RESIDENT_PAGES ].count; ++i)
            {
                FSeek(hdr.lumps[ LUMP_UNK5 ].offset + pages[i].dataOffset);
                struct {
                    char lump5buf[pages[i].dataSize];
                } pagedata;
            }
        } lump5;

    }
}



