//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "MiscStructs.bt"
#include "VGStructs.bt"
typedef unsigned char uint8_t;
typedef uint16 uint16_t;
typedef uint32 uint32_t;
typedef uint64 uint64_t;

struct VertexGroupHeader_t
{
	char id[4] <fgcolor=cLtGreen>;		// 0x47567430	'0tvg'
    //int id <fgcolor=cLtGreen>;             // 0x47567430	'0tvg'
	int version;	    // 0x1
	int unk;	        // Usually 0
	int dataSize;	// Total size of data + header in starpak

	__int64 boneStateChangeOffset; // offset to bone remap buffer
	__int64 numBoneStateChanges;  // number of "bone remaps" (size: 1)

	__int64 meshOffset;   // offset to mesh buffer
	__int64 numMeshes;    // number of meshes (size: 0x48)

	__int64 indexOffset;     // offset to index buffer
	__int64 numIndices;      // number of indices (size: 2 (uint16_t))

	__int64 vertOffset;    // offset to vertex buffer
	__int64 numVerts;     // number of bytes in vertex buffer

	__int64 externalWeightOffset;   // offset to extended weights buffer
	__int64 externalWeightsSize;    // number of bytes in extended weights buffer

    // there is one for every LOD mesh
    // i.e, unknownCount == lod.meshCount for all LODs
	__int64 unknownOffset;   // offset to buffer
	__int64 numUnknown;    // count (size: 0x30)

	__int64 lodOffset;       // offset to LOD buffer
	__int64 numLODs;        // number of LODs (size: 0x8)

	__int64 legacyWeightOffset;	// seems to be an offset into the "external weights" buffer for this mesh
	__int64 numLegacyWeights;   // seems to be the number of "external weights" that this mesh uses

	__int64 stripOffset;    // offset to strips buffer
	__int64 numStrips;     // number of strips (size: 0x23)

    int unused[16];
};

struct MeshHeader_VG_t
{
	__int64 flags <fgcolor=cLtGreen, read=Str("0x%LX", this)>;	// mesh flags

	int vertOffset;			// start offset for this mesh's vertices
	int vertCacheSize;		    // number of bytes used from the vertex buffer
	int numVerts;			// number of vertices

	int unk1; 

	int externalWeightOffset;	// start offset for this mesh's "extended weights"
	int externalWeightSize;    // size or count of extended weights

	int indexOffset;			// start offset for this mesh's "indices"
	int numIndices;				// number of indices

	int legacyWeightOffset;	// seems to be an offset into the "external weights" buffer for this mesh
	int numLegacyWeights;   // seems to be the number of "external weights" that this mesh uses

	int stripOffset;        // Index into the strips structs
	int numStrips;

    // might be stuff like topologies
	int unk[4];

	/*int numBoneStateChanges;
	int boneStateChangeOffset;
	// MDL Version 49 and up only
	int numTopologyIndices;
	int topologyOffset;*/
};

VertexGroupHeader_t vhdr <bgcolor=0x99CC44>;

// asserts
if( vhdr.id != "0tVG" || vhdr.version != 1 )
    Assert(0, "invalid magic/version");
//if( FileSize() != vhdr.dataSize )
//    Assert(0, "invalid data size");

local int i = 0;
local int j = 0;
local int n = 0;
local int k = 0;

FSeek(vhdr.boneStateChangeOffset);
ubyte BoneStates[vhdr.numBoneStateChanges] <bgcolor=cDkGreen>;

struct unkdata
{
    int64 unk;
    float unk1;

    char data[0x24];
};

FSeek(vhdr.unknownOffset);
unkdata unk_data[vhdr.numUnknown]<bgcolor=cYellow>;


for(i = 0; i < vhdr.numLODs; i++)
{
    FSeek(startof(vhdr));
    struct {
        FSeek(vhdr.lodOffset + (i * sizeof(ModelLODHeader_t)));
        ModelLODHeader_t lod <bgcolor=cLtGray>;

        for(j = 0; j < lod.numMeshes; j++)
        {
            FSeek(vhdr.meshOffset + (j * sizeof(MeshHeader_VG_t)) + (lod.meshOffset * sizeof(MeshHeader_VG_t)));
            struct {
                MeshHeader_VG_t mesh <bgcolor=cLtRed>;

                for(n = 0; n < mesh.numStrips; n++)
                {
                    FSeek(vhdr.indexOffset + (mesh.indexOffset * 2));
                    unsigned short indice[mesh.numIndices] <bgcolor=cLtBlue>;

                    FSeek(vhdr.vertOffset + mesh.vertOffset);
                    if(mesh.externalWeightSize)
                    {
                        struct {
                            for(k = 0; k < mesh.numVerts; k++)
                            {
                                 FSeek(vhdr.vertOffset + mesh.vertOffset + (mesh.vertCacheSize * k));
                                struct {
                                    mstudiovertex_t_vg vert <bgcolor=cDkBlue>;

                                    if(vert.m_BoneWeightsPacked.numbones > 1)
                                    {
                                        FSeek(vhdr.externalWeightOffset + mesh.externalWeightOffset + (vert.m_BoneWeightsPacked.weight[1] * sizeof(mstudioexternalboneweight_t)));
                                        mstudioexternalboneweight_t weight[vert.m_BoneWeightsPacked.numbones - 1] <bgcolor=cBlue>;
                                    }
                                } vertex;
                            }
                        } vert_group;
                    }
                    else
                    {
                        mstudiovertex_t_vg verts[mesh.numVerts] <bgcolor=cDkBlue>;
                    }        

                    // conversion leftovers?

                    // for all verts or none
                    FSeek(vhdr.legacyWeightOffset + (mesh.legacyWeightOffset * sizeof(mstudioboneweight_t)));
                    mstudioboneweight_t m_BoneWeights[mesh.numLegacyWeights] <bgcolor=cDkGreen>;

                    FSeek(vhdr.stripOffset + (mesh.stripOffset * (sizeof(StripHeader_t))));
                    StripHeader_t vtx_strip <bgcolor=cLtBlue>;
                }
            } mesh<read=Str("- %i vertices, %i indices, %i weights", this.mesh.numVerts, this.mesh.numIndices, this.mesh.externalWeightSize / 4)>;
        }
    } lod <read=Str("======== LOD %i ========", this.lod.switchPoint)>;
}