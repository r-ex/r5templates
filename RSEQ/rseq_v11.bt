//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rseq
//   Authors: Rika
//   Version: 10
//   Purpose: rseq animations
//  Category: Animation
// File Mask: *.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------

local int i = 0;
local int j = 0;
local int k = 1;
local int si = 0;

mstudioseqdesc_t_v16 seqdesc <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;

local int numanims = seqdesc.groupsize[0] * seqdesc.groupsize[1];
local int numbones = (seqdesc.activitymodifierindex - seqdesc.weightlistindex) / 4;

if((seqdesc.unkindex - seqdesc.animindexindex) <= sizeof(mstudioanimdesc_t_v16))
    numanims = 0;

// generate all the sequences data structures
if(seqdesc.posekeyindex)
{
    FSeek(startof(seqdesc) + seqdesc.posekeyindex);
    float posekey[seqdesc.groupsize[0] + seqdesc.groupsize[1]] <bgcolor=0x55ee00>;
}

if(seqdesc.numevents)
{
    FSeek(startof(seqdesc) + seqdesc.eventindex);
    mstudioevent_t_v16 seqevent[seqdesc.numevents] <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
}

if(seqdesc.numautolayers)
{
    FSeek(startof(seqdesc) + seqdesc.autolayerindex);
    mstudioautolayer_t_v54 autolayers[seqdesc.numautolayers] <bgcolor=0x226600>;
}

FSeek(startof(seqdesc) + seqdesc.weightlistindex);
float weightlist[numbones] <bgcolor=0xe1f27a>;

FSeek(startof(seqdesc) + seqdesc.activitymodifierindex);
mstudioactivitymodifier_t_v16 activitymodifier[seqdesc.numactivitymodifiers] <bgcolor=0x119900, read=Str("%s : %i", ReadString(startof(this) + this.sznameindex), this.unk)>;

FSeek(startof(seqdesc) + seqdesc.animindexindex);
uint16 blends[seqdesc[si].groupsize[0] * seqdesc[si].groupsize[1]] <bgcolor=0xffff00>;

for(k = 0; k < numanims; k++)
{
    FSeek(startof(seqdesc) + blends[k]);
    mstudioanimdesc_t_v16 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
    
    struct {
        if (!(animdesc[k].flags & STUDIO_ALLZEROS))
        {
            if(animdesc[k].sectionindex)
            {
                struct {
                    // porter says this is ((numframes - unk - 1) / sectionframes) + 2
                    // however I have not found a case where that would give another result than what's seen below.
                    // infact, there have been anims that would actually break if using the above equation.
                    local int sectionlength = ((animdesc.numframes - 1) / animdesc.sectionframes) + 2;
    
                    FSeek(startof(animdesc[k]) + animdesc[k].sectionindex);
                    mstudioanimsections_t_v16 sectionindexes[sectionlength] <bgcolor=cLtBlue>;
        
                    local int nullsections = 0;

                    // respawn really needs to cut this out
                    /*if(numanims > 1 && numanims > (k + 1))
                    {
                        if((blends[k] + sectionindexes[0].animindex) >= blends[k + 1])
                        {
                            nullsections = 1;
                        }
                    }*/

                    local int nullsection = 0;

                     if((sectionindexes[1].animindex - sectionindexes[0].animindex) <= 4)
                        nullsection = 1;

                    for(i = 0; i < sectionlength; i++)
                    {
                        if(sectionindexes[i].animindex && !sectionindexes[i].isExternal && !nullsection)
                        {
                            struct {
                                FSeek(startof(animdesc[k]) + sectionindexes[i].animindex);
                                boneflagarray_t_loose flagarray;
                        
                                for(j = 0; j < numbones; j++)
                                {
                                    if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                                    {
                                        mstudio_rle_anim_t_v54 sectionanimheader <bgcolor=0x771122>;
                                        FSeek(startof(sectionanimheader) + sectionanimheader.size);
                                    }
                                }
                            } section;
                        }
                    }
                } sectionanimation;
            }
            else
            {
                struct {
                    FSeek(startof(animdesc[k]) + animdesc[k].animindex);
                    boneflagarray_t_loose flagarray;
    
                    for(j = 0; j < numbones; j++)
                    {
                        if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                        {
                            mstudio_rle_anim_t_v54 animheader <bgcolor=cBlue>;
                            FSeek(startof(animheader) + animheader.size);
                        }
                    }
                } animation;
            }
        }
        if(animdesc[k].numikrules)
        {
            FSeek(startof(animdesc[k]) + animdesc[k].ikruleindex);
            mstudioikrule_t_v16 animikrule[animdesc[k].numikrules] <bgcolor=cGreen>;
        }
    
        /*for(j = -animdesc.numikrules; j < 0; j++)
        {
            if(animikrule[numikrule + j].compressedikerrorindex)
            {
                FSeek(startof(animikrule[numikrule + j]) + animikrule[numikrule + j].compressedikerrorindex);
                mstudiocompressedikerror_t_v54 ikcompressederror <bgcolor=cDkGreen>;
            }
        }*/
    
        if(animdesc[k].compressedikerrorindex)
        {
            FSeek(startof(animdesc[k]) + GetRMDLOffset(animdesc[k].compressedikerrorindex));
            mstudiocompressedikerror_t_v54 ikcompressederror <bgcolor=cLtGreen>;
        }
    } animdesc_data;
}

if(seqdesc.unkcount)
{
    FSeek(startof(seqdesc) + seqdesc.unkindex);
    unkseqdata_t unkseqdata[seqdesc.unkcount] <bgcolor=0x9900BB>;
}


// if this throws let me know, I have yet to find anything here
if(numanims)
{
    for(i = 0; i < numanims; i++)
    {
        for(j = 0; j < 4; j++)
            Assert(!animdesc[i].unk1[j], "unknown animdesc value used");
    }
}


/*if(seqdesc.numevents)
{
    for(i = 0; i < seqdesc.numevents; i++)
        Assert(!seqevent.unk, "unknown event value used");
}*/

Assert(!seqdesc.unk, "unknown seq value used");
Assert(seqdesc.unk1 < 7, "unknown seq value used");
Assert(seqdesc.unkcount < 120, "unknown seq value used");


// create nice looking strings you can view
#include "./RSEQ/rseq_module_strings.bt"
