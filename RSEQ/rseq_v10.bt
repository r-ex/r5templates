//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rseq
//   Authors: Rika
//   Version: 10
//   Purpose: rseq animations
//  Category: Animation
// File Mask: *.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;



mstudioseqdesc_t_v54 seqdesc <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;

local int numanims = 0;

local int zeroanim = 0;
local int localflags = 0;
local int animheaderpos = 0;
local int sectionanimheaderpos = 0;
local int numbones = (seqdesc.activitymodifierindex - seqdesc.weightlistindex) / 4;

local int numanimboneheader = 0;
local int numsectionanimboneheader = 0;
local int numikrule = 0;
local int numsections = 0;
local int sectionlength = 0;

// loop through all sequences to do it's data structures.
for(i = 0; i < 1; i++)
{
    if(seqdesc[i].posekeyindex > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].posekeyindex);
        posekey_t posekey <bgcolor=0x55ee00>;
    }

    if(seqdesc[i].numevents > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].eventindex);
        for(j = 0; j < seqdesc[i].numevents; j++)
        {
            mstudioevent_t_v54_122 seqevent <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
        }
    }

    if(seqdesc[i].numautolayers > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].autolayerindex);
        for(j = 0; j < seqdesc[i].numautolayers; j++)
        {
            mstudioautolayer_t_v54 autolayers <bgcolor=0x226600>;
        }
    }
    
    FSeek(startof(seqdesc[i]) + seqdesc[i].weightlistindex);
    //seqweightlist_t weightlist <bgcolor=0xe1f27a>;
    float weightlist[numbones] <bgcolor=0xe1f27a>;
    
    FSeek(startof(seqdesc[i]) + seqdesc[i].activitymodifierindex);
    for(j = 0; j < seqdesc[i].numactivitymodifiers; j++)
    {
        mstudioactivitymodifier_t_v53 activitymodifier <bgcolor=0x119900, read=Str("%s : %i", ReadString(startof(this) + this.sznameindex), this.unk)>;
    }

    FSeek(startof(seqdesc[i]) + seqdesc[i].animindexindex);
    blendgroup_t_v54 blendgroup <bgcolor=0xffff00>;

    numanims = seqdesc[i].groupsize[0] * seqdesc[i].groupsize[1];

    for(k = 0; k < seqdesc[i].numblends; k++)
    {
        FSeek(startof(seqdesc[i]) + blendgroup[i].blends[k]);
        mstudioanimdesc_t_v54_v121 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;

        if(animdesc[k].flags & STUDIO_ALLZEROS)
        {
            byte flagarray;
            byte ALLZEROSPLACEHOLDER;
        }
        else
        {
            if(animdesc[k].sectionindex)
            {
                FSeek(startof(animdesc[k]) + animdesc[k].sectionindex);
                sectionindexes_t_v54_v121 sectionindexes;
                numsections++;
                sectionlength = (animdesc[i].numframes / animdesc[i].sectionframes) + 2;

                for(x = 0; x < sectionlength; x++)
                {
                    if(sectionindexes[numsections - 1].sectionoffsets[x].isExternal)
                    {
                        
                    }
                    else
                    {
                        FSeek(startof(animdesc[k]) + sectionindexes[numsections - 1].sectionoffsets[x].animindex);
                        boneflagarray_t_loose flagarray;
                
                        for(j = 0; j < numbones; j++)
                        {
                            if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                            {
                                mstudio_rle_anim_t_v54 sectionanimheader <bgcolor=0x771122>;
                                FSeek(startof(sectionanimheader[sectionanimheaderpos]) + sectionanimheader[sectionanimheaderpos].size);
                                sectionanimheaderpos++;
                            }
                        }
                    }
                }
            }
            else
            {
                FSeek(startof(animdesc[k]) + animdesc[k].animindex);
                boneflagarray_t_loose flagarray;
        
                for(j = 0; j < numbones; j++)
                {
                    if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                    {
                        mstudio_rle_anim_t_v54 animheader <bgcolor=cBlue>;
                        FSeek(startof(animheader[animheaderpos]) + animheader[animheaderpos].size);
                        animheaderpos++;
                    }
                }
            }
        }
        
        FSeek(startof(animdesc[k]) + animdesc[k].ikruleindex);
        for (j = 0; j < animdesc[k].numikrules; j++)
        {
            mstudioikrule_t_v54_new animikrule <bgcolor=cGreen>;
            numikrule += 1;
        };

        /*for(j = -animdesc[i].numikrules; j < 0; j++)
        {
            if(animikrule[numikrule + j].compressedikerrorindex > 0)
            {
                FSeek(startof(animikrule[numikrule + j]) + animikrule[numikrule + j].compressedikerrorindex);
                mstudiocompressedikerror_t_v54 ikcompressederror <bgcolor=cDkGreen>;
            }
        }*/

        if(animdesc[k].compressedikerrorindex > 0)
        {
            FSeek(startof(animdesc[k]) + animdesc[k].compressedikerrorindex);
            mstudiocompressedikerror_t_v54 ikcompressederror <bgcolor=cLtGreen>;
        }
    }
}

FSeek(startof(seqdesc) + seqdesc.szlabelindex);
string seqlabel <fgcolor=0x11111AA>;

FSeek(startof(seqdesc) + seqdesc.szactivitynameindex);
string seqactivity <fgcolor=0x0011FF>;