//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rseq
//   Authors: Valve, Rika, & Others
//   Version:
//   Purpose:
//  Category: Struct
// File Mask: *.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------


// these are just all structs that I have mostly working/fitting, it does not mean they are correct.
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//==================
// Animation Structs


// sequence and autolayer flags
#define STUDIO_LOOPING	0x0001		// ending frame should be the same as the starting frame
#define STUDIO_SNAP		0x0002		// do not interpolate between previous animation and this one
#define STUDIO_DELTA	0x0004		// this sequence "adds" to the base sequences, not slerp blends
#define STUDIO_AUTOPLAY	0x0008		// temporary flag that forces the sequence to always play
#define STUDIO_POST		0x0010		// 
#define STUDIO_ALLZEROS	0x0020		// this animation/sequence has no real animation data
#define STUDIO_FRAMEANIM 0x0040		// animation is encoded as by frame x bone instead of RLE bone x frame
#define STUDIO_CYCLEPOSE 0x0080		// cycle index is taken from a pose parameter index
#define STUDIO_REALTIME	0x0100		// cycle index is taken from a real-time clock, not the animations cycle index
#define STUDIO_LOCAL	0x0200		// sequence has a local context sequence
#define STUDIO_HIDDEN	0x0400		// don't show in default selection views
#define STUDIO_OVERRIDE	0x0800		// a forward declared sequence (empty)
#define STUDIO_ACTIVITY	0x1000		// Has been updated at runtime to activity index
#define STUDIO_EVENT	0x2000		// Has been updated at runtime to event index on server
#define STUDIO_WORLD	0x4000		// sequence blends in worldspace
#define STUDIO_NOFORCELOOP 0x8000	// do not force the animation loop
#define STUDIO_EVENT_CLIENT 0x10000	// Has been updated at runtime to event index on client

// v53 flags
#define STUDIO_ANIMDESC_53_UNK 0x20000
#define STUDIO_ANIMDESC_53_UNK1 0x40000

/*string ReadAnimDescFlags(int flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    int flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x1:
            value += "STUDIO_LOOPING";
            break;
        case 0x2:
            value += "STUDIO_SNAP";
            break;
        case 0x4:
            value += "STUDIO_DELTA";
            break;
        case 0x8:
            value += "STUDIO_AUTOPLAY";
            break;
        case 0x10:
            value += "STUDIO_POST";
            break;
        case 0x20:
            value += "STUDIO_ALLZEROS";
            break;
        case 0x40:
            value += "STUDIO_FRAMEANIM";
            break;
        case 0x80:
            value += "STUDIO_CYCLEPOSE";
            break;
        case 0x100:
            value += "STUDIO_REALTIME";
            break;
        case 0x200:
            value += "STUDIO_LOCAL";
            break;
        case 0x400:
            value += "STUDIO_HIDDEN";
            break;
        case 0x800:
            value += "STUDIO_OVERRIDE";
            break;
        case 0x1000:
            value += "STUDIO_ACTIVITY";
            break;
        case 0x2000:
            value += "STUDIO_EVENT";
            break;
        case 0x4000:
            value += "STUDIO_WORLD";
            break;
        case 0x8000:
            value += "STUDIO_NOFORCELOOP";
            break;
        case 0x10000:
            value += "STUDIO_EVENT_CLIENT";
            break;
        case 0x20000:
            value += "STUDIO_ANIMDESC_53_UNK";
            break;
        case 0x40000:
            value += "STUDIO_ANIMDESC_53_UNK1";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}*/

// anim descriptions
struct mstudioanimdesc_t_v54
{
	int baseptr;

	int sznameindex <read=ReadString(startof(parentof(this)) + this)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int nummovements;
	int movementindex;

	int compressedikerrorindex;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used
};

// rseq v7.1
struct mstudioanimdesc_t_v54_v121
{
	int baseptr;

	int sznameindex <read=ReadString(startof(parentof(this)) + this)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int nummovements;
	int movementindex;

	int compressedikerrorindex;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl

	int sectionindex;

    int unk; // what

    int sectionframes; // number of frames used in each fast lookup section, zero if not used

    

    int unk1; // Padding
    int unk2; // Padding
    int unk3; // SomeDataOffset
    int unk4; // SomeDataOffset

    // it seems like there's another int here but I'm unsure
};

struct mstudioanimsections_t_v53
{
	int animindex;
};

struct sectionindexes_t_v53
{
    mstudioanimsections_t_v53 sectionoffsets[(animdesc[i].numframes / animdesc[i].sectionframes) + 2] <bgcolor=cLtBlue>;
};

struct mstudioanimsections_t_v54_v121
{
	int animindex;
    int isExternal; // 0 or 1, if 1 section is not in rseq (I think)
};

struct sectionindexes_t_v54_v121
{
    mstudioanimsections_t_v54_v121 sectionoffsets[(animdesc[i].numframes / animdesc[i].sectionframes) + 2] <bgcolor=cLtBlue>;
};

struct mstudioanim_valueptr_t
{
    int16 offset[3];
};

struct animflagarray_t_v54
{   
    // don't think this is correct
    byte STUDIO_ANIM_POS_54 : 1;
    byte STUDIO_ANIM_ROT_54 : 1;
    byte STUDIO_ANIM_SCALE_54 : 1;
    byte STUDIO_ANIM_UNK_54 : 1;    
};

// for rseq templates because no mdlHeader
struct boneflagarray_t_loose
{
    BitfieldDisablePadding();
    animflagarray_t_v54 boneflag[numbones] <bgcolor=0xaa8822, optimize=false>;
    BitfieldEnablePadding();

    if(numbones % 4)
    {        
        byte padd[(4 - (numbones % 4)) / 2] <bgcolor=0xaaaa22>;
    }
};

// not correct
struct mstudioanim_valueptr_t_v54
{
    uint x : 8;
    uint unk : 8;
    uint y : 8;
    uint z : 8; 
};

#define STUDIO_ANIM_DELTA_54	 0x01 // unverified
#define STUDIO_ANIM_ANIMSCALE_54 0x02 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMROT_54	 0x04 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMPOS_54	 0x08 // mstudioanim_valueptr_t

/*string ReadAnimFlagsV54(byte flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    byte flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case STUDIO_ANIM_DELTA_54:
            value += "STUDIO_ANIM_DELTA_54";
            break;
        case STUDIO_ANIM_ANIMSCALE_54:
            value += "STUDIO_ANIM_ANIMSCALE_54";
            break;
        case STUDIO_ANIM_ANIMROT_54:
            value += "STUDIO_ANIM_ANIMROT_54";
            break;
        case STUDIO_ANIM_ANIMPOS_54:
            value += "STUDIO_ANIM_ANIMPOS_54";
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}*/

struct mstudio_rle_anim_t_v54
{

	int16 size : 12; // total size of all animation data, not next offset because even the last one has it

    int16 flags : 4 <read=ReadAnimFlagsV54(this)>;
    
    if(flags & STUDIO_ANIM_ANIMPOS_54)
        float posscale;

    if(flagarray.boneflag[j].STUDIO_ANIM_POS_54)
    {
        if(flags & STUDIO_ANIM_ANIMPOS_54)
            mstudioanim_valueptr_t_v54 animpos;
        else
            Vector48 rawpos;
    }

    if(flagarray.boneflag[j].STUDIO_ANIM_ROT_54)
    {
        if(flags & STUDIO_ANIM_ANIMROT_54)
            mstudioanim_valueptr_t_v54 animrot;
        else
            Quat64 rawrot;
    }

    if(flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
    {
        if(flags & STUDIO_ANIM_ANIMSCALE_54)
            mstudioanim_valueptr_t_v54 animscale;
        else
            Vector48 rawscale;
    }
};

// ik rule
enum ikruletype
{
    IK_SELF = 1,
    IK_WORLD = 2,
    IK_GROUND = 3,
    IK_RELEASE = 4,
    IK_ATTACHMENT = 5,
    IK_UNLATCH = 6
};

struct mstudioikrule_t_v54
{
    int index;
    ikruletype type;
    int chain;
    int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;

    int slot; // iktarget slot. Usually same as chain.
    float height;
    float radius;
    float floor;
    Vector3 pos;
    Quaternion q;

    // in later versions this is scale, that also might apply here
    int unk[7]; // might be before pos and q

    int compressedikerrorindex;

    int iStart;
    int ikerrorindex;

    float start; // beginning of influence
    float peak; // start of full influence
    float tail; // end of full influence
    float end; // end of all influence

    float contact; // frame footstep makes ground concact
    float drop; // how far down the foot should drop when reaching for IK
    float top; // top of the foot box

    int szattachmentindex; // name of world attachment

    int unk; // there is an int here in apex and 9 unused doesn't make sense.

    
};

struct mstudioikrule_t_v54_new
{
    int index;
    ikruletype type;
    int chain;
    int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;

    int slot; // iktarget slot. Usually same as chain.
    float height;
    float radius;
    float floor;
    Vector3 pos;
    Quaternion q;

    float scale[6]; // these values are the same as what posscale (if it was used) and rotscale are.
	//int16 offset[6];

    int unk1[3];

    //int compressedikerrorindex;

    int iStart;
    //int ikerrorindex;

    float start; // beginning of influence
    float peak; // start of full influence
    float tail; // end of full influence
    float end; // end of all influence

    float contact; // frame footstep makes ground concact
    float drop; // how far down the foot should drop when reaching for IK
    float top; // top of the foot box

    int szattachmentindex; // name of world attachment

    int unk;

    //int unused[9];
};


struct mstudiocompressedikerror_t_v54
{
	float scale[4]; // first three values are the same as what posscale (if it was used) is, fourth is similar to unkvector1.
    // unknown how this works now
	//int offset[9];
};

struct mstudioikrulezeroframe_t
{
	int16		chain;
	int16		slot;
	hfloat		start;	// beginning of influence
	hfloat		peak;	// start of full influence
	hfloat		tail;	// end of full influence
	hfloat		end;	// end of all influence
};

// seq descriptions
struct mstudioseqdesc_t_v54
{
	int baseptr;

	int	szlabelindex <read=ReadString(startof(this) + this - 4)>;

	int szactivitynameindex <read=ReadString(startof(this) + this - 8)>;

	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;
	
	Vector3 bbmin; // per sequence bounding box
	Vector3 bbmax;		

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait
	
	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

    int activitymodifierindex;
	int numactivitymodifiers;

	int unk;
    int unk1;

    int unkindex;

    int unk2;
};

struct mstudioautolayer_t_v54
{
    int64 guid; // hashed aseq guid asset

	short iSequence;
	short iPose;

	int flags <read=ReadAutoLayerFlags(this)>;
	float start;	// beginning of influence
	float peak;	// start of full influence
	float tail;	// end of full influence
	float end;	// end of all influence
};

enum eventtype
{
    NEW_EVENT_STYLE = ( 1 << 10 ),
};

struct mstudioevent_t_v54
{
	float cycle;
	int	event;
	eventtype type; // this will be 0 if old style I'd imagine
	char options[256];

	int szeventindex <read=ReadString(startof(parentof(this)) + this)>;
};

// rseq v10
struct mstudioevent_t_v54_122
{
	float cycle;
	int	event;
	eventtype type; // this will be 0 if old style I'd imagine
	char options[256]; // this is the only difference compared to normal v54

    int unk;

	int szeventindex <read=ReadString(startof(parentof(this)) + this)>;
};

struct blendgroup_t_v54
{
    // this is an offset now
    int blends[seqdesc[i].groupsize[0] * seqdesc[i].groupsize[1]];
};

struct posekey_t
{
    float unk[seqdesc[i].groupsize[0] + seqdesc[i].groupsize[1]];
};

// autolayer flags
//							0x0001
//							0x0002
//							0x0004
//							0x0008
#define STUDIO_AL_POST		0x0010		// 
//							0x0020
#define STUDIO_AL_SPLINE	0x0040		// convert layer ramp in/out curve is a spline instead of linear
#define STUDIO_AL_XFADE		0x0080		// pre-bias the ramp curve to compense for a non-1 weight, assuming a second layer is also going to accumulate
//							0x0100
#define STUDIO_AL_NOBLEND	0x0200		// animation always blends at 1.0 (ignores weight)
//							0x0400
//							0x0800
#define STUDIO_AL_LOCAL		0x1000		// layer is a local context sequence
//							0x2000
#define STUDIO_AL_POSE		0x4000		// layer blends using a pose parameter instead of parent cycle
#define STUDIO_AL_UNK_53	0x8000		// added in v53 (probably)
                                        // I love this game I love this game I love this game I love this game I love this game I love this game

/*string ReadAutoLayerFlags(int flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    int flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x10:
            value += "STUDIO_AL_POST";
            break;
        case 0x40:
            value += "STUDIO_AL_SPLINE";
            break;
        case 0x80:
            value += "STUDIO_AL_XFADE";
            break;
        case 0x200:
            value += "STUDIO_AL_NOBLEND";
            break;
        case 0x1000:
            value += "STUDIO_AL_LOCAL";
            break;
        case 0x4000:
            value += "STUDIO_AL_POSE";
            break;
        case 0x8000:
            value += "STUDIO_AL_UNK_53";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}*/

struct mstudioactivitymodifier_t_v53
{	
	int sznameindex <read=ReadString(startof(this) + this)>;

    int unk; // 0 or 1 observed.
};