//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "MiscStructs.bt"
#include "VGStructs.bt"
typedef unsigned char uint8_t;
typedef uint16 uint16_t;
typedef uint32 uint32_t;
typedef uint64 uint64_t;

struct VertexGroupHeader_t
{
    byte lodLevel;
    byte numLODs;
    
    byte headerIndex; // header idx?
    
    byte numUnknown;
    int lodOffset;
};

struct ModelLODHeader_VG_t_v16
{
    byte numMeshes;
    byte meshOffset; // for lod, probably 0 in most cases
    byte lodLevel;
    byte headerIndex; // set to 0 if there is no extra headers? header idx?
    int meshIndex;
};

// header index might also relate to RMDL headers for vg

struct MeshHeader_VG_t
{
	__int64 flags <fgcolor=cLtGreen, read=Str("0x%LX", this)>;

	int numVerts;		        // number of vertices
	short vertCacheSize;        // number of bytes used from the vertex buffer

    short unk;

	int indexOffset;			// start offset for this mesh's "indices"
	int numIndices : 28;        // number of indices
    int indexType : 4;

	int vertOffset;             // start offset for this mesh's vertices
	int vertBufferSize;         // TOTAL size of vertex buffer

	int externalWeightOffset;	// start offset for this mesh's "extended weights"
	int externalWeightSize;     // size or count of extended weights

    int unkOffset;
    int numUnk;
};

local int i = 0;
local int j = 0;
local int n = 0;
local int k = 0;

local int pos = 0;

while(pos < FileSize())
{
    FSeek(pos);
    VertexGroupHeader_t vhdr <bgcolor=0x99CC44>;

    FSeek(startof(vhdr.lodOffset) + vhdr.lodOffset);
    for(i = 0; i < vhdr.numLODs; i++)
    {
        FSeek(startof(vhdr.lodOffset) + vhdr.lodOffset + (sizeof(ModelLODHeader_VG_t_v16) * i));
        struct {
            ModelLODHeader_VG_t_v16 lod <bgcolor=cLtGray>;

            for(j = 0; j < lod.numMeshes; j++)
            {
                FSeek(startof(lod.meshIndex) + lod.meshIndex + (j * sizeof(MeshHeader_VG_t)) + (lod.meshOffset * sizeof(MeshHeader_VG_t)));
                struct {
                    MeshHeader_VG_t mesh <bgcolor=cLtRed>;
                    
                    FSeek(startof(mesh.indexOffset) + mesh.indexOffset);
                    unsigned short indice[mesh.numIndices] <bgcolor=cLtBlue>;
    
                    FSeek(startof(mesh.vertOffset) + mesh.vertOffset);
                    if(mesh.externalWeightSize)
                    {
                        struct {
                            for(k = 0; k < mesh.numVerts; k++)
                            {
                                FSeek(startof(mesh.vertOffset) + mesh.vertOffset + (mesh.vertCacheSize * k));
                                struct {
                                    mstudiovertex_t_vg vert <bgcolor=cDkBlue>;
    
                                    if(vert.m_BoneWeightsPacked.numbones > 1)
                                    {
                                        FSeek(startof(mesh.externalWeightOffset) + mesh.externalWeightOffset + (vert.m_BoneWeightsPacked.weight[1] * sizeof(mstudioexternalboneweight_t)));
                                        mstudioexternalboneweight_t weight[vert.m_BoneWeightsPacked.numbones - 1] <bgcolor=cBlue>;
                                    }
                                } vertex;
                            }
                        } vert_group;

                        // do this just in case there are external weights and no external weights on last vertex
                        FSeek(startof(mesh.externalWeightOffset) + mesh.externalWeightOffset + mesh.externalWeightSize);
                    }
                    else
                    {
                        mstudiovertex_t_vg verts[mesh.numVerts] <bgcolor=cDkBlue>;
                    }
                } mesh <read=Str("- %i vertices, %i indices, %i weights", this.mesh.numVerts, this.mesh.numIndices, this.mesh.externalWeightSize / 4)>;
            }
        } lod<read=Str("======== LOD %i ========", lod.lodLevel)>;
    }

    // set the pos correctly for next header (if there is one)
    pos = FTell();

    if(pos % 16)
        pos += (16 - (pos % 16));
}