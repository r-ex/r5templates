//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define MAX_NUM_BONES_PER_VERT 3

enum <ubyte> StripHeaderFlags_t
{
	STRIP_IS_TRILIST		= 0x01,
	STRIP_IS_QUADLIST_REG	= 0x02,		// Regular sub-d quads
	STRIP_IS_QUADLIST_EXTRA = 0x04		// Extraordinary sub-d quads
};


// A strip is a piece of a stripgroup which is divided by bones 
struct StripHeader_t
{
	int numIndices;
	int indexOffset;

	int numVerts;    
	int vertOffset;

	short numBones;

	StripHeaderFlags_t flags;

	int numBoneStateChanges;
	int boneStateChangeOffset;

	// MDL Version 49 and up only
	int numTopologyIndices;
	int topologyOffset;
};

struct ModelLODHeader_t
{
	uint16 meshIndex;
	uint16 meshCount;
	float distance;
};

struct PackedPosition
{
    DWORD dword[2];
};

string UnpackPosition(PackedPosition& pos)
{
    	//x = ((_Value[0] & 0x1FFFFF) * 0.0009765625) - 1024.0;
		//y = ((((_Value[1] & 0x3FFu) << 11) + (_Value[0] >> 21)) * 0.0009765625) - 1024.0;
		//z = ((_Value[1] >> 10) * 0.0009765625) - 2048.0;
    local float x = ((pos.dword[0] & 0x1FFFFF) * 0.0009765625) - 1024.0;
    local float y = ((((pos.dword[1] & 0x3FF) << 11) + (pos.dword[0] >> 21)) * 0.0009765625) - 1024.0;
    local float z = ((pos.dword[1] >> 10) * 0.0009765625) - 2048.0;
    return Str("< %f, %f, %f >", x, y, z);
};

string UnpackNormal(DWORD _Value)
{
		local float x, y, z;

		local float v87 = ((2 * _Value) >> 30);
		local int v88 = 255;
		if (((8 * _Value) >> 31) != 0.0)
			v88 = -255;
		local float v89 = (float)v88;
		local float v90 = ((_Value << 13) >> 23) + -256.0;
		local float v91 = ((16 * _Value) >> 23) + -256.0;
		local float v92 = ((v91 * v91) + (255.0 * 255.0)) + (v90 * v90);

		local float v93 = Sqrt(v92);
		local int v97 = 0;

		local float v1, v2, v3;

		v1 = v90 * (1.0 / v93);
		v2 = v89 * (1.0 / v93);
		v3 = v91 * (1.0 / v93);
		if (v87 == 1.0)
			v97 = -1;
		else
			v97 = 0;
		if (v87 == 2.0)
		{
			x = v3;
			y = v1;
			z = v2;
		}
		else
		{
			x = v2;
			y = v3;
			z = v1;
		}
		if (!v97)
		{
			v1 = x;
			v2 = y;
			v3 = z;
		}
		return Str("< %f, %f, %f >", v1, v2, v3);
};

struct PackedVertexWeights
{
	short BlendWeights[2] <read=Str("%f", this /  32767)>; // haha jk.. unless?
    byte BlendIds[4]; // last two flags?
};

struct extendedWeight
{
    byte unk[4];
};

struct mstudioboneweight_t
{
	float	weight[MAX_NUM_BONES_PER_VERT];
	char	bone[MAX_NUM_BONES_PER_VERT]; 
	byte	numbones;
};

struct VertexColor
{
    byte r,g,b,a;
};