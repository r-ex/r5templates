//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "MiscStructs.bt"
#include "VGStructs.bt"
typedef unsigned char uint8_t;
typedef uint16 uint16_t;
typedef uint32 uint32_t;
typedef uint64 uint64_t;

struct VertexGroupHeader_t
{
	char id[4] <fgcolor=cLtGreen>;		// 0x47567430	'0tVG'
	int version;	    // 0x1
	int lodLevel;    // from RMDL struct
	int numLODs;	// total number of lods, them being based of the main header or sub headers.
    int unk;
    int numUnknown; // the one in the main 0tVG header is the total of across all VG LODs.
    int lodOffset;

    // v14 unks
    //char unk3[8];
};

struct MeshHeader_VG_t
{
	__int64 flags <fgcolor=cLtGreen, read=Str("0x%LX", this)>;

	int vertCacheSize;		        // number of bytes used from the vertex buffer
	int numVerts;			        // number of vertices

	__int64 indexOffset;			// start offset for this mesh's "indices"
	__int64 numIndices : 56;        // number of indices
    __int64 indexType : 8;

	__int64 vertOffset;             // start offset for this mesh's vertices
	__int64 vertBufferSize;         // TOTAL size of vertex buffer

	__int64 externalWeightOffset;	// start offset for this mesh's "extended weights"
	__int64 externalWeightSize;     // size or count of extended weights

	__int64 legacyWeightOffset;	    // seems to be an offset into the "external weights" buffer for this mesh
	__int64 numLegacyWeights;       // seems to be the number of "external weights" that this mesh uses

	__int64 stripOffset;            // Index into the strips structs
	__int64 numStrips;

};

VertexGroupHeader_t vhdr <bgcolor=0x99CC44>;

// asserts
if( vhdr.id != "0tVG" || vhdr.version != 1 )
    Assert(0, "invalid magic/version");

local int i = 0;
local int j = 0;
local int n = 0;
local int k = 0;

for(i = 0; i < vhdr.numLODs; ++i)
{
    // 0x14040999F in R5pc_r5-71_J79_CL692369_2020_11_13_11_49
    // (0x18 + (0x18 * i) + vhdr.lodOffset)

    FSeek(startof(vhdr));
    struct {
        FSeek(startof(vhdr.lodOffset) + vhdr.lodOffset + (i * sizeof(ModelLODHeader_VG_t)));
        ModelLODHeader_VG_t lod <bgcolor=cLtGray>;

        if(lod.numMeshes > 1)
        {
            FSeek(startof(lod.meshIndex) + lod.meshIndex - 64);
            VertexGroupHeader_t vghdr <bgcolor=0x99CC44>;
        
            FSeek(startof(vghdr.lodOffset) + vghdr.lodOffset);
            ModelLODHeader_VG_t vglod <bgcolor=cLtGray>;
        }

        for(j = 0; j < lod.numMeshes; j++)
        {
            FSeek(startof(lod.meshIndex) + lod.meshIndex + (j * sizeof(MeshHeader_VG_t)) + (lod.meshOffset * sizeof(MeshHeader_VG_t)));
            struct {
                MeshHeader_VG_t mesh <bgcolor=cLtRed>;

                for(n = 0; n < mesh.numStrips; n++)
                {
                    FSeek(startof(mesh.indexOffset) + mesh.indexOffset);
                    unsigned short indice[mesh.numIndices] <bgcolor=cLtBlue>;

                    FSeek(startof(mesh.vertOffset) + mesh.vertOffset);
                    if(mesh.externalWeightSize)
                    {
                        struct {
                            for(k = 0; k < mesh.numVerts; k++)
                            {
                                FSeek(startof(mesh.vertOffset) + mesh.vertOffset + (mesh.vertCacheSize * k));
                                struct {
                                    mstudiovertex_t_vg vert <bgcolor=cDkBlue>;

                                    if(vert.m_BoneWeightsPacked.numbones > 1)
                                    {
                                        FSeek(startof(mesh.externalWeightOffset) + mesh.externalWeightOffset + (vert.m_BoneWeightsPacked.weight[1] * sizeof(mstudioboneweightextra_t)));
                                        mstudioboneweightextra_t weight[vert.m_BoneWeightsPacked.numbones - 1] <bgcolor=cBlue>;
                                    }
                                } vertex;
                            }
                        } vert_group;
                    }
                    else
                    {
                        mstudiovertex_t_vg verts[mesh.numVerts] <bgcolor=cDkBlue>;
                    }        

                    // conversion leftovers?

                    // for all verts or none
                    FSeek(startof(mesh.legacyWeightOffset) + mesh.legacyWeightOffset);
                    mstudioboneweight_t m_BoneWeights[mesh.numLegacyWeights] <bgcolor=cDkGreen>;

                    FSeek(startof(mesh.stripOffset) + mesh.stripOffset);
                    StripHeader_t vtx_strip <bgcolor=cLtBlue>;
                }
            } mesh <read=Str("- %i vertices, %i indices, %i weights", this.mesh.numVerts, this.mesh.numIndices, this.mesh.externalWeightSize / 4)>;
        }
    } lod <read=Str("======== LOD %i ========", this.lod.switchPoint)>;
};