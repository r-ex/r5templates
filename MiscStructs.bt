//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
struct Vector3
{
    float x,y,z;
};

struct Vector4
{
    float x,y,z,w;
};

struct Vector2
{
    float x,y;
};

typedef Vector3 Vector;

// packed vector
struct Vector32
{
	uint x : 10;
	uint y : 10;
	uint z : 10;
	uint exp : 2;
};

struct Vector48
{
    hfloat x;
    hfloat y;
    hfloat z;
};

// quaternion
struct Quaternion
{
    float x;
    float y;
    float z;
    float w;
};

// packed quaternion
struct Quat32
{
	uint x : 11 <read=Str("%f", (this - 1024) * (1 / 1024.0))>;
	uint y : 10 <read=Str("%f", (this - 512) * (1 / 512.0))>;
	uint z : 10 <read=Str("%f", (this - 512) * (1 / 512.0))>;
	uint wneg : 1;
};

struct Quat48
{
	uint16 x : 16 <read=Str("%f", (this - 32768) * (1 / 32768.5))>;
	uint16 y : 16 <read=Str("%f", (this - 32768) * (1 / 32768.5))>;
	uint16 z : 15 <read=Str("%f", (this - 16384) * (1 / 16384.5))>; // broken
	uint16 wneg : 1;
};

struct Quat64
{
    uint64 x : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 y : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 z : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 wneg : 1;

    //  <read=ReadShort(sqrt( 1 - x * x - y * y - z * z ))>
};

struct RadianEuler
{
    // for when you want radians in float.
    float x;
    float y;
    float z;
};

struct matrix3x4_t
{       //    c0         c1         c2         c3
		float m00; float m01; float m02; float m03; // r0
		float m10; float m11; float m12; float m13; // r1
		float m20; float m21; float m22; float m23; // r2
};